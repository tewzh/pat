// pata1089.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include<stdio.h>
#include"algorithm"
using namespace std;

const int N = 100;

void print(int a[], int n){     //控制输出结果的格式
	for (int i = 0; i < n - 1; i++)
		printf("%d ", a[i]);
	printf("%d\n", a[n - 1]);
}

int main(){
	int n;
	scanf("%d", &n);
	int a[N], b[N];

	for (int i = 0; i < n; i++)
		scanf("%d", &a[i]);
	for (int i = 0; i < n; i++)
		scanf("%d", &b[i]);

	bool isInsertsort = true;     //定义变量标志是否为插入排序


	//判断是否为插入排序
	//原数组与待检测数组进行比较，找到待检测数组中第一个降序排列的数
	//判断待检测自第一个降序排序的数开始后面的数是否与原数组相等
	//相等则为插入排序，否则为归并排序

	int j;
	for (j = 0; j < n; j++)
		if (b[j]>b[j + 1])
			break;
	int index = j;
	for (j = j + 1; j < n; j++){
		if (a[j] != b[j]){
			isInsertsort = false;
			break;
		}
	}

	if (isInsertsort){
		//若为插入排序，则下一次的结果为对前index+1个数进行sort排序，后面的数和原数组相同，直接输出
		printf("Insertion Sort\n");
		sort(a, a + index + 2);
		print(a, n);
	}
	else{
		int step = 1;
		bool find = false;
		while (true){
			step *= 2;

			//归并排序，按照步长
			for (int i = 0; i*step < n; i++){
				int from = i*step;
				int to = ((from + step) < n) ? (from + step) : n;
				sort(a + from, a + to);
			}

			//输出结果
			if (find){
				printf("Merge Sort\n");
				print(a, n);
				break;
			}

			//判断此次该次归并排序后是否和待检测数组相等，是的话即找到
			int k;
			for (k = 0; k < n; k++){
				if (a[k] != b[k]){
					break;
				}
			}
			if (k == n)
				find = true;
		}
		return 0;
	}
}
