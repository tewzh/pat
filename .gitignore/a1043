// pata1043.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include"iostream"
#include"vector"
using namespace std;

//const int N = 1005;
//int a[N],pre[N],post[N],n;
//
struct node{
	int data;
	node* lchild;
	node* rchild;
};
//
//void insert(node* &root,int x){
//	if (root == NULL){
//		root = new node;
//		root->data = x;
//		root->lchild = root->rchild = NULL;
//		return;
//	}
//	if (x >= root->data)
//		insert(root->rchild, x);
//	else
//		insert(root->lchild, x);
//}
//
//node* CreateBST(int a[], int n){
//	node* root = NULL;
//	for (int i = 0; i < n; i++){
//		insert(root, a[i]);
//	}
//	return root;
//}
//
//int k;
//void preorder(node* root){
//	if (root == NULL)
//		return;
//	pre[k++] = root->data;
//	preorder(root->lchild);
//	preorder(root->rchild);
//}
//
//node* CreateMirror(node* root){
//	if (root==NULL||(root->lchild == NULL&&root->rchild == NULL))
//		return root;
//	else{
//		node* temp;
//		temp = root->lchild;
//		root->lchild = root->rchild;
//		root->rchild = temp;
//	}
//	CreateMirror(root->lchild);
//	CreateMirror(root->rchild);
//	return root;
//	
//}
//
//int m = 0;
//void postorder(node* root){
//	if (root == NULL)
//		return;
//	postorder(root->lchild);
//	postorder(root->rchild);
//	post[m++] = root->data;
//}
//
//int main(){
//	cin >> n;
//	for (int i = 0; i < n; i++)
//		cin >> a[i];
//	node* rnode=CreateBST(a, n);
//	preorder(rnode);
//	k = 0;
//	int flagp = 1;
//	for (int i = 0; i < n; i++){
//		if (a[i] != pre[i]){
//			flagp = 0;
//			break;
//		}
//	}
//	if (flagp == 1){
//		cout << "YES" << endl;
//		postorder(rnode);
//		for (int i = 0; i < n - 1; i++)
//			cout << post[i] << " ";
//		cout << post[n - 1] << endl;
//	}
//
//	k = 0;
//	node* mnode = CreateMirror(CreateBST(a, n));
//	preorder(mnode);
//	int flagm = 1;
//	for (int i = 0; i < n; i++){
//		if (a[i] != pre[i]){
//			flagm = 0;
//			break;
//		}
//	}
//	if (flagm == 1){
//		cout << "YES" << endl;
//		postorder(mnode);
//		for (int i = 0; i < n - 1; i++)
//			cout << post[i] << " ";
//		cout << post[n - 1] << endl;
//	}
//
//	if (flagp == 0 && flagm == 0)
//		cout << "NO" << endl;
//
//	return 0;
//}


void insert(node* &root, int data){
	if (root == NULL){
		root = new node;
		root->data = data;
		root->lchild = root->rchild = NULL;
		return;
	}
	if (data < root->data)
		insert(root->lchild, data);
	else
		insert(root->rchild, data);
}

void preOrder(node* root, vector<int> &vi){
	if (root == NULL)
		return;
	vi.push_back(root->data);
	preOrder(root->lchild, vi);
	preOrder(root->rchild, vi);
}

void preOrderMirror(node* root, vector<int> &vi){
	if (root == NULL)
		return;
	vi.push_back(root->data);
	preOrderMirror(root->rchild, vi);
	preOrderMirror(root->lchild, vi);
}

void postOrder(node* root, vector<int> &vi){
	if (root == NULL)
		return;
	postOrder(root->lchild, vi);
	postOrder(root->rchild, vi);
	vi.push_back(root->data);
}

void postOrderMirror(node* root, vector<int> &vi){
	if (root == NULL)
		return;
	postOrderMirror(root->rchild, vi);
	postOrderMirror(root->lchild, vi);
	vi.push_back(root->data);
}

vector<int> origin, pre, post, preM, postM;

int main(){
	int n, data;
	node* root = NULL; 
	cin >> n;
	for (int i = 0; i < n; i++){
		cin >> data;
		origin.push_back(data);
		insert(root, data);
	}
	preOrder(root, pre);
	preOrderMirror(root, preM);
	postOrder(root, post);
	postOrderMirror(root, postM);
	if (origin == pre){
		cout << "YES" << endl;
		for (int i = 0; i < post.size() - 1; i++)
			cout << post[i] << " ";
		cout << post[post.size() - 1] << endl;
	}
	else if (origin == preM){
		cout << "YES" << endl;
		for (int i = 0; i < postM.size() - 1; i++)
			cout << postM[i] << " ";
		cout << post[postM.size() - 1] << endl;
	}
	else
		cout << "NO" << endl;
	return 0;
}
